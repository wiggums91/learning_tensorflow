#Goal of program to create a neural network with 3 convolutional layers to learn to recognise images of cats v dogs from kaggle dataset
#Imports
import os
import zipfile
import random
import tensorflow as tf
import shutil
from tensorflow.keras.optimizers import RMSprop
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from shutil import copyfile
from os import getcwd

#Unzip kaggle cats and dogs file (this was done on a google colab environment)
path_cats_and_dogs = f"{getcwd()}/../tmp2/cats-and-dogs.zip"
shutil.rmtree('/tmp')

local_zip = path_cats_and_dogs
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/tmp')
zip_ref.close()

#Check length of datasets
print(len(os.listdir('/tmp/PetImages/Cat/')))
print(len(os.listdir('/tmp/PetImages/Dog/')))
# Expected Output:
# 1500
# 1500

# Use os.mkdir to create directories for cats-v-dogs, and subdirectories for training
# and testing. These in turn will need subdirectories for 'cats' and 'dogs'
try:
    os.mkdir("/tmp/cats-v-dogs/") #Create top folder

    os.mkdir(os.path.join("/tmp/cats-v-dogs/","training")) #Create /tmp/cats-v-dogs/training/
    os.mkdir(os.path.join("/tmp/cats-v-dogs/", "testing")) #Create /tmp/cats-v-dogs/validation

    os.mkdir(os.path.join("/tmp/cats-v-dogs/training/","cats")) #Create /tmp/cats-v-dogs/training/cats/
    os.mkdir(os.path.join("/tmp/cats-v-dogs/training/","dogs")) #Create /tmp/cats-v-dogs/training/dogs/

    os.mkdir(os.path.join("/tmp/cats-v-dogs/testing/","cats")) #Create /tmp/cats-v-dogs/validation/cats/
    os.mkdir(os.path.join("/tmp/cats-v-dogs/testing/","dogs")) #Create /tmp/cats-v-dogs/validation/dogs/
except OSError:
    pass

#Check that each folder contains expected number of subfolders
print('Length of cats-v-dogs: ', len(os.listdir('/tmp/cats-v-dogs'))) #Should contain 2, training and testing
print('Length of cats-v-dogs/training: ', len(os.listdir('/tmp/cats-v-dogs/training/'))) #Should contain 2, cats and dogs
print('Length of cats-v-dogs/testing: ', len(os.listdir('/tmp/cats-v-dogs/testing/'))) #Should contain 2, cats and dogs
print('Length of cats-v-dogs/training/cats: ', len(os.listdir('/tmp/cats-v-dogs/training/cats/')))
print('Length of cats-v-dogs/training/dogs: ', len(os.listdir('/tmp/cats-v-dogs/training/cats/')))
print('Length of cats-v-dogs/testing/cats: ', len(os.listdir('/tmp/cats-v-dogs/training/cats/')))
print('Length of cats-v-dogs/testing/dogs: ', len(os.listdir('/tmp/cats-v-dogs/training/cats/')))

# A function called split_data which takes
# a SOURCE directory containing the files
# a TRAINING directory that a portion of the files will be copied to
# a TESTING directory that a portion of the files will be copie to
# a SPLIT SIZE to determine the portion
# The files should also be randomized, so that the training set is a random
# X% of the files, and the test set is the remaining files
# SO, for example, if SOURCE is PetImages/Cat, and SPLIT SIZE is .9
# Then 90% of the images in PetImages/Cat will be copied to the TRAINING dir
# and 10% of the images will be copied to the TESTING dir
# Also -- All images should be checked, and if they have a zero file length,
# they will not be copied over
# os.listdir(DIRECTORY) gives you a listing of the contents of that directory
# os.path.getsize(PATH) gives you the size of the file
# copyfile(source, destination) copies a file from source to destination
# random.sample(list, len(list)) shuffles a list

def split_data(SOURCE, TRAINING, TESTING, SPLIT_SIZE):
    #File locations
    print('Source location: ', SOURCE) 
    print('Training set location, to receive files: ', TRAINING)
    print('Test set location, to receive files: ', TESTING, '\n')

    #Collect files in arrays
    source_data = os.listdir(SOURCE)
    print('Total number of images: ', len(source_data))


    #Number of files for training and testing set
    training_share = SPLIT_SIZE * len(source_data)
    testing_share = len(source_data) - training_share
    print('Number of files for training: ', training_share)
    print('Number of files for testing: ', testing_share, '\n')

    #Randomise the dataset
    randomised_source_data = random.sample(source_data,len(source_data))

    #Copy files to training set
    print('First item in data source: ',source_data[0])
    print('Location of first item in data source: ',SOURCE+source_data[0],'\n')
    index = 0

    while index < training_share:
        file_for_copy = source_data[index]
        file_address = SOURCE+file_for_copy
        destination_address = TRAINING+file_for_copy
        copyfile(file_address,destination_address)
        index=index+1

    print('Index after copying to training share: ', index, '\n')

    while index < len(source_data):
        file_for_copy = source_data[index]
        file_address = SOURCE+file_for_copy
        destination_address = TESTING+file_for_copy
        copyfile(file_address,destination_address)
        index=index+1

    print('Index after copying to testing share: ', index, '\n')
    print('Training and testing sets have been created. Moving to next problem!' '\n\n\n')
# YOUR CODE ENDS HERE


CAT_SOURCE_DIR = "/tmp/PetImages/Cat/"
TRAINING_CATS_DIR = "/tmp/cats-v-dogs/training/cats/"
TESTING_CATS_DIR = "/tmp/cats-v-dogs/testing/cats/"
DOG_SOURCE_DIR = "/tmp/PetImages/Dog/"
TRAINING_DOGS_DIR = "/tmp/cats-v-dogs/training/dogs/"
TESTING_DOGS_DIR = "/tmp/cats-v-dogs/testing/dogs/"

split_size = .9
split_data(CAT_SOURCE_DIR, TRAINING_CATS_DIR, TESTING_CATS_DIR, split_size)
split_data(DOG_SOURCE_DIR, TRAINING_DOGS_DIR, TESTING_DOGS_DIR, split_size)

# Keras model with 3 convolutional layers
model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(16,(3,3),activation='relu',input_shape=(150,150,3)),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(32,(3,3),activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(64,(3,3),activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(512,activation='relu'),
    tf.keras.layers.Dense(1,activation='sigmoid')
])

model.compile(optimizer=RMSprop(lr=0.001), loss='binary_crossentropy', metrics=['acc'])

TRAINING_DIR = "/tmp/cats-v-dogs/training/"
train_datagen = ImageDataGenerator(rescale=1/255)

# NOTE: YOU MUST USE A BATCH SIZE OF 10 (batch_size=10) FOR THE
# TRAIN GENERATOR.
train_generator = train_datagen.flow_from_directory(TRAINING_DIR,
                                                   batch_size = 10,
                                                   class_mode='binary',
                                                   target_size=(150,150))

VALIDATION_DIR = "/tmp/cats-v-dogs/testing"
validation_datagen = ImageDataGenerator(rescale=1/255)

# NOTE: YOU MUST USE A BACTH SIZE OF 10 (batch_size=10) FOR THE
# VALIDATION GENERATOR.
validation_generator = validation_datagen.flow_from_directory(VALIDATION_DIR,
                                                   batch_size = 10,
                                                   class_mode='binary',
                                                   target_size=(150,150))


# Expected Output:
# Found 2700 images belonging to 2 classes.
# Found 300 images belonging to 2 classes.

# PLOT LOSS AND ACCURACY
%matplotlib inline

import matplotlib.image  as mpimg
import matplotlib.pyplot as plt

#-----------------------------------------------------------
# Retrieve a list of list results on training and test data
# sets for each training epoch
#-----------------------------------------------------------
acc=history.history['acc']
val_acc=history.history['val_acc']
loss=history.history['loss']
val_loss=history.history['val_loss']

epochs=range(len(acc)) # Get number of epochs

#------------------------------------------------
# Plot training and validation accuracy per epoch
#------------------------------------------------
plt.plot(epochs, acc, 'r', "Training Accuracy")
plt.plot(epochs, val_acc, 'b', "Validation Accuracy")
plt.title('Training and validation accuracy')
plt.figure()

#------------------------------------------------
# Plot training and validation loss per epoch
#------------------------------------------------
plt.plot(epochs, loss, 'r', "Training Loss")
plt.plot(epochs, val_loss, 'b', "Validation Loss")


plt.title('Training and validation loss')

# Desired output. Charts with training and validation metrics. No crash :)
